generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ActivityType {
  note
  call
  email
  whatsapp
  task
}

enum ActivityStatus {
  OPEN
  COMPLETED
}

enum ActivityPriority {
  LOW
  MEDIUM
  HIGH
}

enum StageTransitionMode {
  NONE
  MANUAL
  AUTO
}

enum GlobalRole {
  USER
  ADMIN_GLOBAL
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum UserTokenPurpose {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  INVITE
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  name               String?
  image              String?
  passwordHash       String?
  emailVerified      DateTime?
  globalRole         GlobalRole @default(USER)
  onboardingComplete Boolean    @default(false)
  lastLoginAt        DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  accounts           Account[]
  sessions           Session[]
  memberships        Membership[]
  membershipsInvited Membership[]           @relation("MembershipInvitedBy")
  invitesCreated     Invite[]               @relation("InviteCreator")
  workspacesCreated  Workspace[]            @relation("WorkspaceCreator")
  auditLogs          AuditLog[]             @relation("AuditActor")
  activitiesAssigned Activity[]             @relation("ActivityAssignee")
  activitiesCreated  Activity[]             @relation("ActivityCreator")
  activityFollowers  ActivityFollower[]
  activityComments   ActivityComment[]      @relation("ActivityCommentAuthor")
  activityMentions   ActivityCommentMention[] @relation("ActivityCommentMentionUser")
  impersonations     ImpersonationSession[] @relation("Impersonator")
  tokens             UserToken[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  color       String   @default("#16A34A")
  archived    Boolean  @default(false)
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy      User?                  @relation("WorkspaceCreator", fields: [createdById], references: [id])
  memberships    Membership[]
  invites        Invite[]
  pipelines      Pipeline[]
  auditLogs      AuditLog[]
  impersonations ImpersonationSession[]
  activities     Activity[]
}

model Membership {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  invitedById String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy User?     @relation("MembershipInvitedBy", fields: [invitedById], references: [id])

  @@unique([userId, workspaceId])
  @@index([workspaceId, role])
}

model Invite {
  id          String        @id @default(cuid())
  email       String
  token       String        @unique
  role        WorkspaceRole @default(MEMBER)
  workspaceId String
  createdById String
  acceptedAt  DateTime?
  expiresAt   DateTime
  createdAt   DateTime      @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation("InviteCreator", fields: [createdById], references: [id])
}

model UserToken {
  id         String           @id @default(cuid())
  userId     String?
  email      String?
  token      String           @unique
  purpose    UserTokenPurpose
  expiresAt  DateTime
  consumedAt DateTime?
  metadata   Json?
  createdAt  DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([purpose, expiresAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  workspaceId String?
  actorUserId String?
  action      String
  targetType  String?
  targetId    String?
  metadata    Json?
  createdAt   DateTime @default(now())

  workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  actor     User?      @relation("AuditActor", fields: [actorUserId], references: [id])

  @@index([workspaceId])
  @@index([actorUserId])
}

model ImpersonationSession {
  id          String    @id @default(cuid())
  adminUserId String
  workspaceId String
  createdAt   DateTime  @default(now())
  endedAt     DateTime?

  admin     User      @relation("Impersonator", fields: [adminUserId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([adminUserId])
  @@index([workspaceId])
}

model Pipeline {
  id                    String    @id @default(cuid())
  name                  String
  color                 String    @default("#16A34A")
  archived              Boolean   @default(false)
  webhookToken          String?   @unique
  webhookSlug           String?   @unique
  webhookDefaultStageId String?
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String    @default("legacy-workspace")
  stages                Stage[]
  leads                 Lead[]
  createdAt             DateTime  @default(now())

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

model Stage {
  id                         String              @id @default(cuid())
  name                       String
  position                   Int
  pipeline                   Pipeline            @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId                 String
  leads                      Lead[]
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  transitionMode             StageTransitionMode @default(NONE)
  transitionTargetPipelineId String?
  transitionTargetStageId    String?
  transitionCopyActivities   Boolean             @default(true)
  transitionArchiveSource    Boolean             @default(false)

  @@unique([pipelineId, position])
  @@unique([pipelineId, name])
  @@index([transitionTargetPipelineId])
}

model Lead {
  id         String     @id @default(cuid())
  name       String
  email      String?
  phone      String?
  company    String?
  valueCents Int?
  ownerId    String?
  pipeline   Pipeline   @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  stage      Stage?     @relation(fields: [stageId], references: [id], onDelete: SetNull)
  stageId    String?
  activities Activity[]
  archived   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([archived])
}

model Activity {
  id           String           @id @default(cuid())
  workspace    Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String
  lead         Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId       String
  type         ActivityType
  title        String           @default("")
  content      String
  status       ActivityStatus   @default(OPEN)
  priority     ActivityPriority @default(MEDIUM)
  dueAt        DateTime?
  completedAt  DateTime?
  assignee     User?            @relation("ActivityAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId   String?
  createdBy    User?            @relation("ActivityCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById  String?
  followers    ActivityFollower[]
  comments     ActivityComment[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([workspaceId])
  @@index([leadId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueAt])
}

model ActivityFollower {
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())

  @@id([activityId, userId])
  @@index([userId])
}

model ActivityComment {
  id         String                    @id @default(cuid())
  activity   Activity                  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String
  author     User?                     @relation("ActivityCommentAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  authorId   String?
  content    String
  mentions   ActivityCommentMention[]
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt
}

model ActivityCommentMention {
  id        String          @id @default(cuid())
  comment   ActivityComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user      User            @relation("ActivityCommentMentionUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime        @default(now())

  @@index([userId])
}
